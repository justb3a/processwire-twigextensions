<?php namespace ProcessWire;

/**
*
* TwigExtensions
*
* See README.md for usage instructions.
*
* @author Tabea David <td@kf-interactive.com>
* @version 1.0.0
* @copyright Copyright (c) 2016
* @see https://github.com/justonestep/processwire-twigextensions
* @see http://www.processwire.com
*/

/**
* Class TwigExtensions
*/
class TwigExtensions extends WireData implements Module {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Twig Extensions',
      'summary' => 'Allows customizing twig, e.g. add extensions',
      'version' => 100,
      'href' => 'https://github.com/justonestep/processwire-twigextensions',
      'singular' => true,
      'autoload' => true,
      'icon' => 'puzzle-piece',
      'requires' => array(
        'TemplateEngineFactory',
        'TemplateEngineTwig'
      )
    );
  }

  /**
   * Initialize the module
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   */
  public function init() {
    // add hook, add twig debug mode
    if ($this->modules->get('TemplateEngineTwig')) {
      $this->addHookAfter('TemplateEngineTwig::initTwig', $this, 'addExtensions');
    }
  }

  /**
   * Hook add twig extensions
   *
   * @param HookEvent $event
   */
  public function addExtensions(HookEvent $event) {
    $this->twig = $event->arguments('twig');

    $this->addDebugExtension();
    $this->addTextExtension();
    $this->addArrayExtension();
    $this->addDateExtension();
    $this->addIntlExtension();
  }

  /*
   * Add Debug Extension
   *
   * The dump function dumps information about a template variable.
   * This is mostly useful to debug a template that does not behave
   * as expected by introspecting its variables
   *
   * Usage: {{ dump(page) }}
   */
  private function addDebugExtension() {
    if ($this->debug === 1 && $this->config->debug) {
      $this->twig->addExtension(new \Twig_Extension_Debug());
    }
  }

  /*
   * Add Text Extension
   *
   * Adds the truncate and wordwrap filters
   *
   */
  private function addTextExtension() {
    if ($this->textExt === 1) {
      if (!class_exists('Twig_Extensions_Extension_Text')) {
        require(/*NoCompile*/__DIR__ . '/vendor/autoload.php');
      }

      $this->twig->addExtension(new \Twig_Extensions_Extension_Text());
    }
  }

  /*
   * Add Array Extension
   *
   * Adds the shuffle filter
   *
   */
  private function addArrayExtension() {
    if ($this->arrayExt === 1) {
      if (!class_exists('Twig_Extensions_Extension_Array')) {
        require(/*NoCompile*/__DIR__ . '/vendor/autoload.php');
      }

      $this->twig->addExtension(new \Twig_Extensions_Extension_Array());
    }
  }

  /*
   * Add Date Extension
   *
   * Adds the date and time_diff filter
   *
   */
  private function addDateExtension() {
    if ($this->dateExt === 1) {
      if (!class_exists('Twig_Extensions_Extension_Date')) {
        require(/*NoCompile*/__DIR__ . '/vendor/autoload.php');
      }

      $this->twig->addExtension(new \Twig_Extensions_Extension_Date());
    }
  }

  /*
   * Add Intl Extension
   *
   * The Intl Extension provides the localizeddate, localizednumber and localizedcurrency filters.
   * First of all, you will need the PHP intl extension, as the Twig extension is built on top of that.
   * The Twig Intl extension will throw an Exception if the PHP intl extension is not enabled.
   * Installation instructions can be found in the official PHP documentation.
   *
   * Usage: {{ post.published|localizeddate('medium', 'none', locale) }}
   */
  private function addIntlExtension() {
    if ($this->intl === 1) {
      if (!class_exists('Twig_Extensions_Extension_Intl')) {
        require(/*NoCompile*/__DIR__ . '/vendor/autoload.php');
      }

      $this->twig->addExtension(new \Twig_Extensions_Extension_Intl());
    }
  }
}
