<?php namespace ProcessWire;

/**
*
* TwigExtensions
*
* See README.md for usage instructions.
*
* @author Tabea David <td@kf-interactive.com>
* @version 1.0.2
* @copyright Copyright (c) 2016
* @see https://github.com/justonestep/processwire-twigextensions
* @see http://www.processwire.com
*/

/**
* Class TwigExtensions
*/
class TwigExtensions extends WireData implements Module {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Twig Extensions',
      'summary' => 'Allows customizing twig, e.g. add extensions',
      'version' => 103,
      'href' => 'https://github.com/justonestep/processwire-twigextensions',
      'singular' => true,
      'autoload' => true,
      'icon' => 'puzzle-piece',
      'requires' => array(
        'TemplateEngineFactory',
        'TemplateEngineTwig'
      )
    );
  }

  /**
   * Initialize the module
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   */
  public function init() {
    // add hook, add twig debug mode
    if ($this->modules->get('TemplateEngineTwig')) {
      $this->addHookBefore('TemplateEngineTwig::initTwig', $this, 'addExtensions');
    }
  }

  /**
   * Hook add twig extensions
   *
   * @param HookEvent $event
   */
  public function addExtensions(HookEvent $event) {
    $this->twig = $event->arguments('twig');

    $enabledExtensions = array();
    $enabledHelpers = array();
    foreach ($this->data as $key => $val) {
      if ($val && substr($key, -3) === 'Ext') $enabledExtensions[] = $key;
      if ($val && substr($key, -6) === 'Helper') $enabledHelpers[] = $key;
    }

    if ($enabledExtensions) {
      require(/*NoCompile*/__DIR__ . '/vendor/autoload.php');

      foreach ($enabledExtensions as $ext) {
        $addExtension = 'add' . ucfirst($ext);
        $this->$addExtension(); // addDebugExt() for example
      }
    }

    if ($enabledHelpers) {
      foreach ($enabledHelpers as $helper) {
        $addHelper = 'add' . ucfirst($helper);
        $this->$addHelper(); // addFileExistsHelper() for example
      }
    }
  }

  /*
   * Add Debug Extension
   *
   * The dump function dumps information about a template variable.
   * This is mostly useful to debug a template that does not behave
   * as expected by introspecting its variables
   *
   * Usage: {{ dump(page) }}
   */
  private function addDebugExt() {
    // always add this extension if it's enabled
    // if `config->debug` is set to false, it's just omitted
    // otherwise it would throw an exception
    $this->twig->addExtension(new \Twig_Extension_Debug());
  }

  /*
   * Add Text Extension
   * Adds the truncate and wordwrap filters
   */
  private function addTextExt() {
    $this->twig->addExtension(new \Twig_Extensions_Extension_Text());
  }

  /*
   * Add Array Extension
   * Adds the shuffle filter
   */
  private function addArrayExt() {
    $this->twig->addExtension(new \Twig_Extensions_Extension_Array());
  }

  /*
   * Add Date Extension
   * Adds the time_diff filter
   */
  private function addDateExt() {
    $this->twig->addExtension(new \Twig_Extensions_Extension_Date());
  }

  /*
   * Add Intl Extension
   *
   * The Intl Extension provides the localizeddate, localizednumber and localizedcurrency filters.
   * First of all, you will need the PHP intl extension, as the Twig extension is built on top of that.
   * The Twig Intl extension will throw an Exception if the PHP intl extension is not enabled.
   * Installation instructions can be found in the official PHP documentation.
   *
   * Usage: {{ post.published|localizeddate('medium', 'none', locale) }}
   */
  private function addIntlExt() {
    $this->twig->addExtension(new \Twig_Extensions_Extension_Intl());
  }

  /*
   * Add FileExists Helper
   *
   * Checks whether a file or directory exists
   *
   * Usage: {% if file_exists(config.paths.assets ~ 'img/filename.png') %}
   */
  private function addFileExistsHelper() {
    $function = new \Twig_SimpleFunction("file_exists", function ($filename) {
      return !empty($filename) && file_exists($filename) ? true : false;
    });

    // add function to twig environment
    $this->twig->addFunction($function);
  }

    /*
   * Add Widont Helper
   *
   * Prevent widow in string
   *
   * Usage: {{ title|widont }}
   * Input: "Add Widont Helper"
   * Output: "Add Widont&nbsp;Helper"
   */
  private function addWidontHelper()
  {
    $function = new \Twig_SimpleFilter("widont", function ($str) {
      return preg_replace('/\s+(\S+)$/', '&#160;$1', rtrim($str));
    });

    // add function to twig environment
    $this->twig->addFilter($function);    
  }
}
